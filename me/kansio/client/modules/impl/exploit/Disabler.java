package me.kansio.client.modules.impl.exploit;

import me.kansio.client.modules.impl.*;
import me.kansio.client.modules.api.*;
import me.kansio.client.modules.impl.exploit.disabler.*;
import me.kansio.client.utils.math.*;
import me.kansio.client.value.value.*;
import javax.vecmath.*;
import com.google.common.eventbus.*;
import me.kansio.client.utils.java.*;
import java.util.*;
import java.util.stream.*;
import java.util.function.*;
import me.kansio.client.event.impl.*;

@ModuleData(name = "Disabler", category = ModuleCategory.EXPLOIT, description = "Disables anticheats")
public class Disabler extends Module
{
    private final /* synthetic */ BooleanValue timer;
    private /* synthetic */ DisablerMode currentMode;
    private final /* synthetic */ Stopwatch stopwatch;
    private final /* synthetic */ NumberValue delayKeepAliveAmount;
    private final /* synthetic */ NumberValue voidTpDelay;
    private final /* synthetic */ NumberValue voidTpAmount;
    private final /* synthetic */ BooleanValue spoofOnGround;
    private final /* synthetic */ BooleanValue cancelKeepAlives;
    private final /* synthetic */ BooleanValue delayKeepAlives;
    private final /* synthetic */ BooleanValue sendC0C;
    public final /* synthetic */ BooleanValue autoDisable;
    private final /* synthetic */ BooleanValue voidTeleport;
    private final /* synthetic */ NumberValue bmcDelay;
    private final /* synthetic */ BooleanValue maxc0c;
    private final /* synthetic */ BooleanValue spectateSpoof;
    private final /* synthetic */ BooleanValue offGround;
    private final /* synthetic */ BooleanValue abilitiesSpoof;
    private final /* synthetic */ ModeValue mode;
    private /* synthetic */ boolean expectedTeleport;
    private final /* synthetic */ List<? extends DisablerMode> modes;
    private final /* synthetic */ NumberValue timerSpeed;
    private final /* synthetic */ BooleanValue delayTransactions;
    private /* synthetic */ Vector3d repeatPos;
    private final /* synthetic */ NumberValue delayTransAmount;
    private final /* synthetic */ BooleanValue cancelTransactions;
    
    public NumberValue getDelayTransAmount() {
        return this.delayTransAmount;
    }
    
    public List<? extends DisablerMode> getModes() {
        return this.modes;
    }
    
    public BooleanValue getSpectateSpoof() {
        return this.spectateSpoof;
    }
    
    boolean shouldRun() {
        return Disabler.mc.thePlayer != null && Disabler.mc.thePlayer.ticksExisted > 5;
    }
    
    public BooleanValue getSendC0C() {
        return this.sendC0C;
    }
    
    public NumberValue getVoidTpAmount() {
        return this.voidTpAmount;
    }
    
    public boolean isExpectedTeleport() {
        return this.expectedTeleport;
    }
    
    public NumberValue getDelayKeepAliveAmount() {
        return this.delayKeepAliveAmount;
    }
    
    @Subscribe
    public void onUpdate(final UpdateEvent lIllIllllllII) {
        if (this.currentMode == null) {
            return;
        }
        this.currentMode.onUpdate(lIllIllllllII);
    }
    
    public Disabler() {
        this.modes = ReflectUtils.getReflects(String.valueOf(new StringBuilder().append(this.getClass().getPackage().getName()).append(".disabler")), DisablerMode.class).stream().map(lIllIlIIIIlIl -> {
            try {
                return (DisablerMode)lIllIlIIIIlIl.getDeclaredConstructor((Class<?>[])new Class[0]).newInstance(new Object[0]);
            }
            catch (Exception lIllIlIIIIlll) {
                lIllIlIIIIlll.printStackTrace();
                return null;
            }
        }).sorted(Comparator.comparing(lIllIlIIIlIlI -> (lIllIlIIIlIlI != null) ? lIllIlIIIlIlI.getName() : null)).collect((Collector<? super Object, ?, List<? extends DisablerMode>>)Collectors.toList());
        this.mode = new ModeValue("Mode", this, (String[])this.modes.stream().map((Function<? super Object, ?>)DisablerMode::getName).collect((Collector<? super Object, ?, List<? super Object>>)Collectors.toList()).toArray(new String[0]));
        this.currentMode = (this.modes.stream().anyMatch(lIllIlIIIllIl -> lIllIlIIIllIl.getName().equalsIgnoreCase(this.mode.getValue())) ? this.modes.stream().filter(lIllIlIIlIlIl -> lIllIlIIlIlIl.getName().equalsIgnoreCase(this.mode.getValue())).findAny().get() : null);
        this.repeatPos = new Vector3d();
        this.stopwatch = new Stopwatch();
        this.bmcDelay = new NumberValue("Delay", this, (T)350, (T)0, (T)1000, (T)1, this.mode, new String[] { "BlocksMC" });
        this.cancelTransactions = new BooleanValue("Cancel Transactions", this, false, this.mode, new String[] { "Custom" });
        this.cancelKeepAlives = new BooleanValue("Cancel Keep Alive", this, false, this.mode, new String[] { "Custom" });
        this.delayTransactions = new BooleanValue("Delay Transactions", this, false, this.mode, new String[] { "Custom" });
        this.delayTransAmount = new NumberValue("Transaction Delay", this, (T)1000, (T)0, (T)60000, (T)0.1, this.delayTransactions);
        this.delayKeepAlives = new BooleanValue("Delay Keep Alive", this, false, this.mode, new String[] { "Custom" });
        this.delayKeepAliveAmount = new NumberValue("Delay Alive Amount", this, (T)1000, (T)0, (T)60000, (T)0.1, this.delayKeepAlives);
        this.sendC0C = new BooleanValue("Send C0C", this, false, this.mode, new String[] { "Custom" });
        this.maxc0c = new BooleanValue("Max Value C0C", this, false, this.mode, new String[] { "Custom" });
        this.voidTeleport = new BooleanValue("Void Teleport", this, false, this.mode, new String[] { "Custom" });
        this.voidTpDelay = new NumberValue("TP Delay", this, (T)3000, (T)0, (T)60000, (T)1, this.voidTeleport);
        this.voidTpAmount = new NumberValue("TP Amount", this, (T)(-999999999), (T)0, (T)6000000, (T)0.1, this.voidTeleport);
        this.spoofOnGround = new BooleanValue("Spoof Ground", this, false, this.mode, new String[] { "Custom" });
        this.offGround = new BooleanValue("No ground", this, false, this.mode, new String[] { "Custom" });
        this.spectateSpoof = new BooleanValue("Spectate Spoof", this, false, this.mode, new String[] { "Custom" });
        this.abilitiesSpoof = new BooleanValue("Abilities Spoof", this, false, this.mode, new String[] { "Custom" });
        this.timer = new BooleanValue("Timer", this, false, this.mode, new String[] { "Custom" });
        this.timerSpeed = new NumberValue("Timer Speed", this, (T)1, (T)0.1, (T)10, (T)0.1, this.timer);
        this.autoDisable = new BooleanValue("Hub Disable", this, false, this.mode, new String[] { "BlocksMC" });
    }
    
    public BooleanValue getAutoDisable() {
        return this.autoDisable;
    }
    
    @Subscribe
    public void onSendPacket(final PacketEvent lIlllIIIIlIII) {
        if (this.currentMode == null) {
            return;
        }
        this.currentMode.onPacket(lIlllIIIIlIII);
    }
    
    public BooleanValue getMaxc0c() {
        return this.maxc0c;
    }
    
    public NumberValue getBmcDelay() {
        return this.bmcDelay;
    }
    
    public BooleanValue getCancelKeepAlives() {
        return this.cancelKeepAlives;
    }
    
    public NumberValue getVoidTpDelay() {
        return this.voidTpDelay;
    }
    
    public void setRepeatPos(final Vector3d lIllIlIlIIlIl) {
        this.repeatPos = lIllIlIlIIlIl;
    }
    
    public Stopwatch getStopwatch() {
        return this.stopwatch;
    }
    
    public DisablerMode getCurrentMode() {
        return this.currentMode;
    }
    
    public Vector3d getRepeatPos() {
        return this.repeatPos;
    }
    
    public ModeValue getMode() {
        return this.mode;
    }
    
    public BooleanValue getCancelTransactions() {
        return this.cancelTransactions;
    }
    
    public BooleanValue getDelayTransactions() {
        return this.delayTransactions;
    }
    
    public NumberValue getTimerSpeed() {
        return this.timerSpeed;
    }
    
    @Override
    public void onEnable() {
        this.currentMode = (this.modes.stream().anyMatch(lIllIlIIllIll -> lIllIlIIllIll.getName().equalsIgnoreCase(this.mode.getValue())) ? this.modes.stream().filter(lIllIlIlIIIIl -> lIllIlIlIIIIl.getName().equalsIgnoreCase(this.mode.getValue())).findAny().get() : null);
        if (this.currentMode != null) {
            this.currentMode.onEnable();
        }
    }
    
    public BooleanValue getAbilitiesSpoof() {
        return this.abilitiesSpoof;
    }
    
    @Override
    public String getSuffix() {
        return String.valueOf(new StringBuilder().append(" ").append(this.mode.getValueAsString()));
    }
    
    public BooleanValue getSpoofOnGround() {
        return this.spoofOnGround;
    }
    
    public BooleanValue getDelayKeepAlives() {
        return this.delayKeepAlives;
    }
    
    @Subscribe
    public void onMove(final MoveEvent lIlllIIIIIIlI) {
        if (this.currentMode == null) {
            return;
        }
        this.currentMode.onMove(lIlllIIIIIIlI);
    }
    
    public BooleanValue getTimer() {
        return this.timer;
    }
    
    public BooleanValue getVoidTeleport() {
        return this.voidTeleport;
    }
    
    public BooleanValue getOffGround() {
        return this.offGround;
    }
}
