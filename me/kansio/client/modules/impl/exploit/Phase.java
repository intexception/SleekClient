package me.kansio.client.modules.impl.exploit;

import me.kansio.client.modules.impl.*;
import me.kansio.client.modules.api.*;
import me.kansio.client.utils.math.*;
import me.kansio.client.value.value.*;
import net.minecraft.network.play.server.*;
import me.kansio.client.modules.impl.player.*;
import com.google.common.eventbus.*;
import java.util.*;
import me.kansio.client.utils.player.*;
import net.minecraft.network.play.client.*;
import me.kansio.client.utils.network.*;
import net.minecraft.network.*;
import net.minecraft.world.*;
import net.minecraft.block.*;
import net.minecraft.util.*;
import me.kansio.client.event.impl.*;
import me.kansio.client.value.*;

@ModuleData(name = "Phase", category = ModuleCategory.EXPLOIT, description = "Allows you to clip through walls")
public class Phase extends Module
{
    private /* synthetic */ NumberValue<Float> distance;
    private /* synthetic */ ModeValue modeValue;
    private /* synthetic */ BooleanValue sneak;
    private /* synthetic */ int moveUnder;
    
    @Subscribe
    public void onPacket(final PacketEvent lllllllllllllllllllIlllIIlIIllIl) {
        if (this.modeValue.getValue().equals("Vanilla") && lllllllllllllllllllIlllIIlIIllIl.getPacket() instanceof S08PacketPlayerPosLook) {
            if (this.moveUnder == 2) {
                this.moveUnder = 1;
            }
            else if (this.moveUnder == 69) {
                this.moveUnder = 1488;
            }
        }
        if (this.modeValue.getValue().contains("Blocks") && lllllllllllllllllllIlllIIlIIllIl.getPacket() instanceof S02PacketChat) {
            final S02PacketChat lllllllllllllllllllIlllIIlIlIlIl = lllllllllllllllllllIlllIIlIIllIl.getPacket();
            final String lllllllllllllllllllIlllIIlIlIlII = lllllllllllllllllllIlllIIlIlIlIl.getChatComponent().getFormattedText();
            if (lllllllllllllllllllIlllIIlIlIlII.contains("Cages open in:")) {
                if (this.sneak.getValue() && !Phase.mc.gameSettings.keyBindSneak.pressed) {
                    return;
                }
                final Block lllllllllllllllllllIlllIIlIlIllI = Phase.mc.theWorld.getBlockState(new BlockPos(Phase.mc.thePlayer.posX, Phase.mc.thePlayer.posY - 1.0, Phase.mc.thePlayer.posZ)).getBlock();
                if (lllllllllllllllllllIlllIIlIlIllI.getLocalizedName().toLowerCase().contains("glass") || (Phase.mc.gameSettings.keyBindSneak.pressed && !lllllllllllllllllllIlllIIlIlIllI.getLocalizedName().toLowerCase().contains("air"))) {
                    HackerDetect.getInstance().setCageYValue(Phase.mc.thePlayer.posY);
                    Phase.mc.thePlayer.setPosition(Phase.mc.thePlayer.posX, Phase.mc.thePlayer.posY - 3.0, Phase.mc.thePlayer.posZ);
                }
            }
        }
    }
    
    @Override
    public String getSuffix() {
        return this.modeValue.getValueAsString();
    }
    
    @Subscribe
    public void onMove(final MoveEvent lllllllllllllllllllIlllIIllllIII) {
        if (Objects.equals(((Value<Object>)this.modeValue).getValue(), "Vanilla")) {
            if (this.sneak.getValue() && !Phase.mc.thePlayer.isSneaking()) {
                return;
            }
            if (this.isInsideBlock()) {
                if (Phase.mc.gameSettings.keyBindJump.isKeyDown()) {
                    lllllllllllllllllllIlllIIllllIII.setMotionY(Phase.mc.thePlayer.motionY = 0.5);
                }
                else if (Phase.mc.gameSettings.keyBindSneak.isKeyDown()) {
                    lllllllllllllllllllIlllIIllllIII.setMotionY(Phase.mc.thePlayer.motionY = -0.5);
                }
                else {
                    lllllllllllllllllllIlllIIllllIII.setMotionY(Phase.mc.thePlayer.motionY = 0.0);
                }
                PlayerUtil.setMotion(lllllllllllllllllllIlllIIllllIII, this.distance.getValue());
            }
        }
    }
    
    public Phase() {
        this.modeValue = new ModeValue("Mode", this, new String[] { "Vanilla", "Skip", "Packetless", "Old", "BlocksMC (VClip)" });
        this.distance = new NumberValue<Float>("Distance", this, 2.0f, 0.5f, 5.0f, 0.1f);
        this.sneak = new BooleanValue("Sneak", this, true);
    }
    
    @Subscribe
    public void event(final UpdateEvent lllllllllllllllllllIllIlllIIllIl) {
        final double[] lllllllllllllllllllIllIlllIIllII = PlayerUtil.teleportForward(this.distance.getValue());
        if ((this.sneak.getValue() && Phase.mc.thePlayer.isSneaking()) || !this.sneak.getValue()) {
            final Exception lllllllllllllllllllIllIlllIIlIII = (Exception)this.modeValue.getValue();
            String lllllllllllllllllllIllIlllIIIlll = (String)(-1);
            switch (((String)lllllllllllllllllllIllIlllIIlIII).hashCode()) {
                case 79367: {
                    if (((String)lllllllllllllllllllIllIlllIIlIII).equals("Old")) {
                        lllllllllllllllllllIllIlllIIIlll = (String)0;
                        break;
                    }
                    break;
                }
                case -2145434047: {
                    if (((String)lllllllllllllllllllIllIlllIIlIII).equals("Packetless")) {
                        lllllllllllllllllllIllIlllIIIlll = (String)1;
                        break;
                    }
                    break;
                }
                case 2578847: {
                    if (((String)lllllllllllllllllllIllIlllIIlIII).equals("Skip")) {
                        lllllllllllllllllllIllIlllIIIlll = (String)2;
                        break;
                    }
                    break;
                }
                case 1897755483: {
                    if (((String)lllllllllllllllllllIllIlllIIlIII).equals("Vanilla")) {
                        lllllllllllllllllllIllIlllIIIlll = (String)3;
                        break;
                    }
                    break;
                }
                case 1958801383: {
                    if (((String)lllllllllllllllllllIllIlllIIlIII).equals("BlocksMC (VClip)")) {
                        lllllllllllllllllllIllIlllIIIlll = (String)4;
                        break;
                    }
                    break;
                }
            }
            switch (lllllllllllllllllllIllIlllIIIlll) {
                case 0L: {
                    if (Phase.mc.thePlayer.isCollidedHorizontally) {
                        PacketUtil.sendPacketNoEvent(new C03PacketPlayer.C04PacketPlayerPosition(Phase.mc.thePlayer.posX + lllllllllllllllllllIllIlllIIllII[0], Phase.mc.thePlayer.posY, Phase.mc.thePlayer.posZ + lllllllllllllllllllIllIlllIIllII[1], true));
                        PacketUtil.sendPacketNoEvent(new C03PacketPlayer.C04PacketPlayerPosition(Phase.mc.thePlayer.posX + lllllllllllllllllllIllIlllIIllII[0], Phase.mc.thePlayer.posY - 256.0, Phase.mc.thePlayer.posZ + lllllllllllllllllllIllIlllIIllII[1], true));
                        Phase.mc.thePlayer.setPosition(Phase.mc.thePlayer.posX + lllllllllllllllllllIllIlllIIllII[0], Phase.mc.thePlayer.posY, Phase.mc.thePlayer.posZ + lllllllllllllllllllIllIlllIIllII[1]);
                    }
                    if (this.isInsideBlock()) {
                        lllllllllllllllllllIllIlllIIllIl.setOnGround(true);
                        PlayerUtil.setMotion(this.distance.getValue());
                        Phase.mc.thePlayer.motionY = (Phase.mc.thePlayer.movementInput.jump ? (this.distance.getValue() / 2.0f) : (Phase.mc.thePlayer.movementInput.sneak ? (-this.distance.getValue() / 2.0f) : 0.0));
                        break;
                    }
                    break;
                }
                case 1L: {
                    if (Phase.mc.thePlayer.isCollidedHorizontally) {
                        Phase.mc.thePlayer.setPosition(Phase.mc.thePlayer.posX + lllllllllllllllllllIllIlllIIllII[0] / 4.0, Phase.mc.thePlayer.posY, Phase.mc.thePlayer.posZ + lllllllllllllllllllIllIlllIIllII[1] / 4.0);
                        break;
                    }
                    break;
                }
                case 2L: {
                    if (Phase.mc.thePlayer.isCollidedHorizontally) {
                        PacketUtil.sendPacketNoEvent(new C03PacketPlayer.C04PacketPlayerPosition(Phase.mc.thePlayer.posX + PlayerUtil.teleportForward(0.004999999888241291)[0], Phase.mc.thePlayer.posY, Phase.mc.thePlayer.posZ + PlayerUtil.teleportForward(0.004999999888241291)[1], true));
                        Phase.mc.thePlayer.setPosition(Phase.mc.thePlayer.posX + PlayerUtil.teleportForward(0.004999999888241291)[0], Phase.mc.thePlayer.posY, Phase.mc.thePlayer.posZ + PlayerUtil.teleportForward(0.004999999888241291)[1]);
                    }
                    if (this.isInsideBlock()) {
                        PacketUtil.sendPacketNoEvent(new C03PacketPlayer.C04PacketPlayerPosition(Phase.mc.thePlayer.posX + 1.5 * Math.cos(Math.toRadians(Phase.mc.thePlayer.rotationYaw + 90.0f)), Phase.mc.thePlayer.posY, Phase.mc.thePlayer.posZ + 1.5 * Math.sin(Math.toRadians(Phase.mc.thePlayer.rotationYaw + 90.0f)), true));
                        Phase.mc.thePlayer.boundingBox.offsetAndUpdate(1.5 * Math.cos(Math.toRadians(Phase.mc.thePlayer.rotationYaw + 90.0f)), 0.0, 1.5 * Math.sin(Math.toRadians(Phase.mc.thePlayer.rotationYaw + 90.0f)));
                        break;
                    }
                    break;
                }
                case 3L: {
                    if (Phase.mc.gameSettings.keyBindSneak.isPressed() && !this.isInsideBlock()) {
                        Phase.mc.thePlayer.sendQueue.getNetworkManager().sendPacket(new C03PacketPlayer.C04PacketPlayerPosition(Phase.mc.thePlayer.posX, Phase.mc.thePlayer.posY - 2.0, Phase.mc.thePlayer.posZ, true));
                        this.moveUnder = 2;
                        break;
                    }
                    break;
                }
                case 4L: {
                    if (this.sneak.getValue() && !Phase.mc.gameSettings.keyBindSneak.pressed) {
                        return;
                    }
                    final Block lllllllllllllllllllIllIlllIIllll = Phase.mc.theWorld.getBlockState(new BlockPos(Phase.mc.thePlayer.posX, Phase.mc.thePlayer.posY - 1.0, Phase.mc.thePlayer.posZ)).getBlock();
                    if ((lllllllllllllllllllIllIlllIIllll.getLocalizedName().toLowerCase().contains("glass") || (Phase.mc.gameSettings.keyBindSneak.pressed && Phase.mc.thePlayer.ticksExisted % 5 == 0)) && Phase.mc.thePlayer.onGround) {
                        Phase.mc.thePlayer.setPosition(Phase.mc.thePlayer.posX, Phase.mc.thePlayer.posY - 3.0, Phase.mc.thePlayer.posZ);
                        break;
                    }
                    break;
                }
            }
        }
    }
    
    @Subscribe
    public void onTick(final TickEvent lllllllllllllllllllIlllIlIIlIIll) {
        if (Phase.mc.thePlayer == null) {
            return;
        }
        if ("Vanilla".equals(((Value<Object>)this.modeValue).getValue())) {
            if (this.sneak.getValue() && !Phase.mc.thePlayer.isSneaking()) {
                return;
            }
            if (Phase.mc.thePlayer != null && this.moveUnder == 1) {
                Phase.mc.thePlayer.sendQueue.getNetworkManager().sendPacket(new C03PacketPlayer.C04PacketPlayerPosition(Phase.mc.thePlayer.posX, Phase.mc.thePlayer.posY - 2.0, Phase.mc.thePlayer.posZ, false));
                Phase.mc.thePlayer.sendQueue.getNetworkManager().sendPacket(new C03PacketPlayer.C04PacketPlayerPosition(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, true));
                this.moveUnder = 0;
            }
            if (Phase.mc.thePlayer != null && this.moveUnder == 1488) {
                final double lllllllllllllllllllIlllIlIIllIII = -Math.sin(Math.toRadians(Phase.mc.thePlayer.rotationYaw));
                final double lllllllllllllllllllIlllIlIIlIlll = Math.cos(Math.toRadians(Phase.mc.thePlayer.rotationYaw));
                final double lllllllllllllllllllIlllIlIIlIllI = Phase.mc.thePlayer.movementInput.moveForward * lllllllllllllllllllIlllIlIIllIII + Phase.mc.thePlayer.movementInput.moveStrafe * lllllllllllllllllllIlllIlIIlIlll;
                final double lllllllllllllllllllIlllIlIIlIlIl = Phase.mc.thePlayer.movementInput.moveForward * lllllllllllllllllllIlllIlIIlIlll - Phase.mc.thePlayer.movementInput.moveStrafe * lllllllllllllllllllIlllIlIIllIII;
                Phase.mc.thePlayer.sendQueue.getNetworkManager().sendPacket(new C03PacketPlayer.C04PacketPlayerPosition(Phase.mc.thePlayer.posX + lllllllllllllllllllIlllIlIIlIllI, Phase.mc.thePlayer.posY, Phase.mc.thePlayer.posZ + lllllllllllllllllllIlllIlIIlIlIl, false));
                Phase.mc.thePlayer.sendQueue.getNetworkManager().sendPacket(new C03PacketPlayer.C04PacketPlayerPosition(Double.NEGATIVE_INFINITY, Phase.mc.thePlayer.posY, Double.NEGATIVE_INFINITY, true));
                this.moveUnder = 0;
            }
        }
    }
    
    private boolean isInsideBlock() {
        try {
            for (int lllllllllllllllllllIllIllIIlIIll = MathHelper.floor_double(Phase.mc.thePlayer.getEntityBoundingBox().minX); lllllllllllllllllllIllIllIIlIIll < MathHelper.floor_double(Phase.mc.thePlayer.getEntityBoundingBox().maxX) + 1; ++lllllllllllllllllllIllIllIIlIIll) {
                for (int lllllllllllllllllllIllIllIIlIlII = MathHelper.floor_double(Phase.mc.thePlayer.getEntityBoundingBox().minY + 1.0); lllllllllllllllllllIllIllIIlIlII < MathHelper.floor_double(Phase.mc.thePlayer.getEntityBoundingBox().maxY) + 2; ++lllllllllllllllllllIllIllIIlIlII) {
                    for (int lllllllllllllllllllIllIllIIlIlIl = MathHelper.floor_double(Phase.mc.thePlayer.getEntityBoundingBox().minZ); lllllllllllllllllllIllIllIIlIlIl < MathHelper.floor_double(Phase.mc.thePlayer.getEntityBoundingBox().maxZ) + 1; ++lllllllllllllllllllIllIllIIlIlIl) {
                        final Block lllllllllllllllllllIllIllIIlIllI = Phase.mc.theWorld.getBlockState(new BlockPos(lllllllllllllllllllIllIllIIlIIll, lllllllllllllllllllIllIllIIlIlII, lllllllllllllllllllIllIllIIlIlIl)).getBlock();
                        if (lllllllllllllllllllIllIllIIlIllI != null && !(lllllllllllllllllllIllIllIIlIllI instanceof BlockAir)) {
                            AxisAlignedBB lllllllllllllllllllIllIllIIlIlll = lllllllllllllllllllIllIllIIlIllI.getCollisionBoundingBox(Phase.mc.theWorld, new BlockPos(lllllllllllllllllllIllIllIIlIIll, lllllllllllllllllllIllIllIIlIlII, lllllllllllllllllllIllIllIIlIlIl), Phase.mc.theWorld.getBlockState(new BlockPos(lllllllllllllllllllIllIllIIlIIll, lllllllllllllllllllIllIllIIlIlII, lllllllllllllllllllIllIllIIlIlIl)));
                            if (lllllllllllllllllllIllIllIIlIllI instanceof BlockHopper) {
                                lllllllllllllllllllIllIllIIlIlll = new AxisAlignedBB(lllllllllllllllllllIllIllIIlIIll, lllllllllllllllllllIllIllIIlIlII, lllllllllllllllllllIllIllIIlIlIl, lllllllllllllllllllIllIllIIlIIll + 1, lllllllllllllllllllIllIllIIlIlII + 1, lllllllllllllllllllIllIllIIlIlIl + 1);
                            }
                            if (lllllllllllllllllllIllIllIIlIlll != null && Phase.mc.thePlayer.getEntityBoundingBox().intersectsWith(lllllllllllllllllllIllIllIIlIlll)) {
                                return true;
                            }
                        }
                    }
                }
            }
            return false;
        }
        catch (Exception lllllllllllllllllllIllIllIIlIIlI) {
            lllllllllllllllllllIllIllIIlIIlI.printStackTrace();
            return false;
        }
    }
    
    @Subscribe
    public void onCollide(final BlockCollisionEvent lllllllllllllllllllIlllIIIlIIIII) {
        if (this.modeValue.getValue().equals("Vanilla")) {
            if (this.sneak.getValue() && !Phase.mc.thePlayer.isSneaking()) {
                return;
            }
            if (Phase.mc.thePlayer.isCollidedHorizontally && !this.isInsideBlock()) {
                final double lllllllllllllllllllIlllIIIlIIlll = -Math.sin(Math.toRadians(Phase.mc.thePlayer.rotationYaw));
                final double lllllllllllllllllllIlllIIIlIIllI = Math.cos(Math.toRadians(Phase.mc.thePlayer.rotationYaw));
                final double lllllllllllllllllllIlllIIIlIIlIl = Phase.mc.thePlayer.movementInput.moveForward * lllllllllllllllllllIlllIIIlIIlll + Phase.mc.thePlayer.movementInput.moveStrafe * lllllllllllllllllllIlllIIIlIIllI;
                final double lllllllllllllllllllIlllIIIlIIlII = Phase.mc.thePlayer.movementInput.moveForward * lllllllllllllllllllIlllIIIlIIllI - Phase.mc.thePlayer.movementInput.moveStrafe * lllllllllllllllllllIlllIIIlIIlll;
                lllllllllllllllllllIlllIIIlIIIII.setAxisAlignedBB(null);
                Phase.mc.thePlayer.setPosition(Phase.mc.thePlayer.posX + lllllllllllllllllllIlllIIIlIIlIl, Phase.mc.thePlayer.posY, Phase.mc.thePlayer.posZ + lllllllllllllllllllIlllIIIlIIlII);
                this.moveUnder = 69;
            }
            if (this.isInsideBlock()) {
                lllllllllllllllllllIlllIIIlIIIII.setAxisAlignedBB(null);
            }
        }
    }
}
