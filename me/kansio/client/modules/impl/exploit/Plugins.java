package me.kansio.client.modules.impl.exploit;

import me.kansio.client.modules.impl.*;
import me.kansio.client.modules.api.*;
import me.kansio.client.value.value.*;
import me.kansio.client.utils.math.*;
import me.kansio.client.event.impl.*;
import net.minecraft.network.play.server.*;
import java.util.*;
import me.kansio.client.utils.chat.*;
import net.minecraft.network.play.client.*;
import net.minecraft.network.*;
import com.google.common.eventbus.*;

@ModuleData(name = "Plugins", category = ModuleCategory.EXPLOIT, description = "Attempts to show you the plugins on the server")
public class Plugins extends Module
{
    /* synthetic */ boolean differentMethod;
    private /* synthetic */ BooleanValue slashAbout;
    private /* synthetic */ Stopwatch timer;
    
    @Subscribe
    public void onPacket(final PacketEvent lllllIIllllIl) {
        if (lllllIIllllIl.getPacket() instanceof S3APacketTabComplete) {
            final S3APacketTabComplete lllllIlIIIIlI = lllllIIllllIl.getPacket();
            final String[] lllllIlIIIIIl = lllllIlIIIIlI.func_149630_c();
            System.out.println(Arrays.toString(lllllIlIIIIIl));
            String lllllIlIIIIII = "";
            int lllllIIllllll = 0;
            if (!this.differentMethod) {
                final String lllllIIllIllI = (Object)lllllIlIIIIIl;
                final String lllllIIllIlIl = (String)lllllIIllIllI.length;
                for (double lllllIIllIlII = 0; lllllIIllIlII < lllllIIllIlIl; ++lllllIIllIlII) {
                    final String lllllIlIIIlII = lllllIIllIllI[lllllIIllIlII];
                    final String lllllIlIIIlIl = lllllIlIIIlII.split(":")[0].substring(1);
                    if (!lllllIlIIIIII.contains(lllllIlIIIlIl) && lllllIlIIIlII.contains(":") && !lllllIlIIIlIl.equalsIgnoreCase("minecraft") && !lllllIlIIIlIl.equalsIgnoreCase("bukkit")) {
                        ++lllllIIllllll;
                        if (lllllIlIIIIII.isEmpty()) {
                            lllllIlIIIIII = String.valueOf(new StringBuilder().append(lllllIlIIIIII).append(lllllIlIIIlIl));
                        }
                        else {
                            lllllIlIIIIII = String.valueOf(new StringBuilder().append(lllllIlIIIIII).append("§8, §a").append(lllllIlIIIlIl));
                        }
                    }
                }
            }
            else {
                final String lllllIIllIllI = (Object)lllllIlIIIIIl;
                final String lllllIIllIlIl = (String)lllllIIllIllI.length;
                for (double lllllIIllIlII = 0; lllllIIllIlII < lllllIIllIlIl; ++lllllIIllIlII) {
                    final String lllllIlIIIIll = lllllIIllIllI[lllllIIllIlII];
                    if (lllllIlIIIIII.isEmpty()) {
                        lllllIlIIIIII = String.valueOf(new StringBuilder().append(lllllIlIIIIII).append(lllllIlIIIIll));
                    }
                    else {
                        lllllIlIIIIII = String.valueOf(new StringBuilder().append(lllllIlIIIIII).append("§8, §a").append(lllllIlIIIIll));
                    }
                }
            }
            if (!lllllIlIIIIII.isEmpty()) {
                ChatUtil.log(String.valueOf(new StringBuilder().append("§7Plugins (§f").append(lllllIIllllll).append("§7): §a ").append(lllllIlIIIIII).append("§7.")));
            }
            else {
                ChatUtil.log("Plugins: none.");
            }
            this.toggle();
            lllllIIllllIl.setCancelled(true);
        }
        if (this.timer.timeElapsed(20000L)) {
            this.toggle();
            if (this.slashAbout.getValue()) {
                ChatUtil.log("Stopped listening for an S3APacketTabComplete! Took to long (20s)! trying different method");
                Plugins.mc.getNetHandler().getNetworkManager().sendPacket(new C14PacketTabComplete("/about "));
                this.timer.resetTime();
            }
            else {
                ChatUtil.log("Stopped listening for an S3APacketTabComplete! Took to long (20s)!");
            }
        }
    }
    
    public Plugins() {
        this.timer = new Stopwatch();
        this.slashAbout = new BooleanValue("/About", this, false);
        this.differentMethod = false;
    }
    
    @Override
    public void onEnable() {
        this.timer.resetTime();
        final boolean lllllIlIlIIll = false;
        Plugins.mc.getNetHandler().getNetworkManager().sendPacket(new C14PacketTabComplete("/"));
        ChatUtil.log("Listening for a S3APacketTabComplete for 20s!");
    }
}
