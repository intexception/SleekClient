package me.kansio.client.modules.impl.exploit;

import me.kansio.client.modules.impl.*;
import me.kansio.client.modules.api.*;
import me.kansio.client.value.value.*;
import me.kansio.client.utils.chat.*;
import me.kansio.client.event.impl.*;
import net.minecraft.network.*;
import net.minecraft.network.play.client.*;
import net.minecraft.item.*;
import me.kansio.client.utils.network.*;
import com.google.common.eventbus.*;
import me.kansio.client.value.*;

@ModuleData(name = "Regen", category = ModuleCategory.EXPLOIT, description = "Automatically regenerates health")
public class Regen extends Module
{
    private final /* synthetic */ BooleanValue timerBypass;
    private final /* synthetic */ ModeValue modeValue;
    private /* synthetic */ NumberValue<Double> health;
    private /* synthetic */ NumberValue<Double> packets;
    
    public Regen() {
        this.health = new NumberValue<Double>("Health", this, 15.0, 1.0, 20.0, 1.0);
        this.packets = new NumberValue<Double>("Packets", this, 15.0, 1.0, 200.0, 1.0);
        this.modeValue = new ModeValue("Mode", this, new String[] { "Vanilla", "Matrix", "Ghostly" });
        this.timerBypass = new BooleanValue("Timer Bypass", this, true);
    }
    
    @Override
    public void onEnable() {
        if (this.modeValue.getValue().equalsIgnoreCase("matrix")) {
            ChatUtil.log("Credit to Dort");
        }
    }
    
    @Subscribe
    public void onUpdate(final UpdateEvent lllIlIlIl) {
        if (Regen.mc.thePlayer.getHealth() >= this.health.getValue()) {
            return;
        }
        if (!Regen.mc.thePlayer.onGround) {
            return;
        }
        final double lllIlIIll = ((Value<Double>)this.modeValue).getValue();
        Exception lllIlIIlI = (Exception)(-1);
        switch (((String)lllIlIIll).hashCode()) {
            case 1897755483: {
                if (((String)lllIlIIll).equals("Vanilla")) {
                    lllIlIIlI = (Exception)0;
                    break;
                }
                break;
            }
            case 1671735356: {
                if (((String)lllIlIIll).equals("Ghostly")) {
                    lllIlIIlI = (Exception)1;
                    break;
                }
                break;
            }
            case -1997372447: {
                if (((String)lllIlIIll).equals("Matrix")) {
                    lllIlIIlI = (Exception)2;
                    break;
                }
                break;
            }
        }
        switch (lllIlIIlI) {
            case 0L: {
                for (int lllIlllII = 0; lllIlllII < this.packets.getValue(); ++lllIlllII) {
                    Regen.mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer(true));
                }
                break;
            }
            case 1L: {
                if (Regen.mc.thePlayer.ticksExisted % 10 == 0) {
                    final double lllIllIlI = Regen.mc.thePlayer.posX;
                    final double lllIllIIl = Regen.mc.thePlayer.posY + 1.0E-9;
                    final double lllIllIII = Regen.mc.thePlayer.posZ;
                    for (int lllIllIll = 0; lllIllIll < this.packets.getValue(); ++lllIllIll) {
                        Regen.mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C06PacketPlayerPosLook(lllIllIlI, lllIllIIl, lllIllIII, Regen.mc.thePlayer.rotationYaw, Regen.mc.thePlayer.rotationPitch, true));
                    }
                    break;
                }
                break;
            }
            case 2L: {
                for (int lllIlIlll = 0; lllIlIlll < this.packets.getValue().intValue(); ++lllIlIlll) {
                    PacketUtil.sendPacketNoEvent(new C08PacketPlayerBlockPlacement(Regen.mc.thePlayer.getPosition().down(256), 256, null, 0.0f, 0.0f, 0.0f));
                    if (this.timerBypass.getValue()) {
                        PacketUtil.sendPacket(((boolean)this.timerBypass.getValue()) ? new C03PacketPlayer.C04PacketPlayerPosition(Regen.mc.thePlayer.posX, Regen.mc.thePlayer.posY, Regen.mc.thePlayer.posZ, true) : new C03PacketPlayer(true));
                    }
                }
                break;
            }
        }
    }
}
